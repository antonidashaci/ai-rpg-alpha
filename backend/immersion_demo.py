"""
AI-RPG-Alpha: Immersion Demonstration

Shows the dramatic difference between generic "video game speak" and 
authentic, immersive character dialogue and world descriptions.
"""

from backend.engine.immersive_storytelling import storytelling_engine, NPCPersonality

class ImmersionDemo:
    """Demonstrates the power of immersive storytelling"""
    
    def demonstrate_dialogue_authenticity(self):
        """Show realistic vs generic dialogue examples"""
        
        print("üé≠ IMMERSIVE DIALOGUE DEMONSTRATION")
        print("=" * 80)
        print("The difference between generic 'video game speak' and authentic character dialogue\n")
        
        # Gruff Merchant Examples
        print("üè™ GRUFF MERCHANT ENCOUNTER")
        print("-" * 40)
        print("‚ùå GENERIC (Before):")
        print("'Greetings, traveler! How may I assist you on this fine day?'")
        print("'I have many fine wares for sale! Please browse my selection!'")
        print()
        print("‚úÖ IMMERSIVE (After):")
        
        # Generate authentic dialogue
        merchant_greeting = storytelling_engine.generate_authentic_dialogue(
            "marcus_trader", "first_meeting", {"karma": 0}, [], "stranger"
        )
        merchant_business = storytelling_engine.generate_authentic_dialogue(
            "marcus_trader", "business_inquiry", {"karma": 0}, [], "stranger"
        )
        
        print(f"'{merchant_greeting}'")
        print(f"'{merchant_business}'")
        print()
        print("üß† WHY IT WORKS:")
        print("‚Ä¢ Personality-driven speech patterns")
        print("‚Ä¢ Realistic impatience and directness")
        print("‚Ä¢ No fake politeness - authentic to character type")
        print("‚Ä¢ Creates immediate understanding of who this person is")
        print("\n" + "‚ïê" * 80 + "\n")
        
        # Nervous Guard Examples
        print("üõ°Ô∏è NERVOUS GUARD ENCOUNTER")
        print("-" * 40)
        print("‚ùå GENERIC (Before):")
        print("'Halt! State your business here, citizen!'")
        print("'I am a loyal guard of this fine establishment!'")
        print()
        print("‚úÖ IMMERSIVE (After):")
        
        guard_greeting = storytelling_engine.generate_authentic_dialogue(
            "guard_tim", "first_meeting", {"karma": 0}, [], "stranger"
        )
        
        print(f"'{guard_greeting}'")
        print("'Uh, excuse me... I need to see your, um, papers?'")
        print("'Please don't make this difficult. I'm just doing my job.'")
        print()
        print("üß† WHY IT WORKS:")
        print("‚Ä¢ Shows uncertainty and inexperience")
        print("‚Ä¢ Stammering reveals nervousness authentically")
        print("‚Ä¢ Polite but unsure - realistic for new guard")
        print("‚Ä¢ Makes player feel the character's human vulnerability")
        print("\n" + "‚ïê" * 80 + "\n")
        
        # Arrogant Noble Examples
        print("üëë ARROGANT NOBLE ENCOUNTER")
        print("-" * 40)
        print("‚ùå GENERIC (Before):")
        print("'Hello there, good sir! How are you doing today?'")
        print("'What brings you to speak with me?'")
        print()
        print("‚úÖ IMMERSIVE (After):")
        
        noble_greeting = storytelling_engine.generate_authentic_dialogue(
            "lord_blackwood", "first_meeting", {"karma": 0}, [], "stranger"
        )
        
        print(f"'{noble_greeting}'")
        print("'You may speak, but be brief and respectful.'")
        print("'Make your business known quickly. My time is valuable.'")
        print()
        print("üß† WHY IT WORKS:")
        print("‚Ä¢ Immediately establishes social hierarchy")
        print("‚Ä¢ Condescending tone feels authentic to privileged background")
        print("‚Ä¢ Creates immediate emotional response in player")
        print("‚Ä¢ Shows character's worldview through speech patterns")
        print("\n" + "‚ïê" * 80 + "\n")
    
    def demonstrate_mood_based_reactions(self):
        """Show how character mood affects dialogue authentically"""
        
        print("üé≠ MOOD-BASED DIALOGUE SYSTEM")
        print("=" * 60)
        print("Same character, different circumstances = different reactions\n")
        
        print("üè™ MARCUS THE MERCHANT - MOOD VARIATIONS")
        print("-" * 50)
        
        scenarios = [
            ("Normal Day", {"karma": 0}, [], "stranger"),
            ("After Robbery", {"karma": 0}, ["robbery_nearby"], "stranger"),
            ("Good Business Day", {"karma": 0}, ["good_business"], "customer"),
            ("Evil Player Reputation", {"karma": -60}, [], "stranger")
        ]
        
        for scenario_name, reputation, events, relationship in scenarios:
            print(f"üìÖ {scenario_name.upper()}:")
            dialogue = storytelling_engine.generate_authentic_dialogue(
                "marcus_trader", "first_meeting", reputation, events, relationship
            )
            print(f"   '{dialogue}'\n")
        
        print("üß† IMMERSION IMPACT:")
        print("‚Ä¢ World feels alive and reactive")
        print("‚Ä¢ Characters remember and respond to events")
        print("‚Ä¢ Player actions have meaningful consequences")
        print("‚Ä¢ Creates sense of living, breathing world")
        print("\n" + "‚ïê" * 80 + "\n")
    
    def demonstrate_social_class_speech(self):
        """Show how social class affects authentic speech patterns"""
        
        print("üèõÔ∏è SOCIAL CLASS SPEECH PATTERNS")
        print("=" * 60)
        print("Authentic speech reflects character background\n")
        
        # Create sample dialogue from different social classes
        examples = [
            ("Peasant Elder", "elder_miriam", "Welcome, young one. What brings you to our humble village?"),
            ("Noble Lord", "lord_blackwood", "You may speak, but be brief and respectful."),
            ("Criminal Thief", "shadow_thief", "*looks around nervously* What do you want?"),
            ("Merchant Innkeeper", "martha_innkeeper", "Welcome to the Sleepy Griffin, dearie! Come in!")
        ]
        
        for class_name, character_id, sample in examples:
            print(f"üë§ {class_name.upper()}:")
            print(f"   '{sample}'")
            
            character = storytelling_engine.character_database[character_id]
            print(f"   Background: {character.background_story}")
            print(f"   Speech patterns: {', '.join(character.speech_patterns)}")
            print()
        
        print("üß† AUTHENTICITY ELEMENTS:")
        print("‚Ä¢ Vocabulary matches education level")
        print("‚Ä¢ Formality reflects social standing") 
        print("‚Ä¢ Slang and expressions fit character's world")
        print("‚Ä¢ Body language cues enhance immersion")
        print("\n" + "‚ïê" * 80 + "\n")
    
    def demonstrate_immersive_descriptions(self):
        """Show rich, sensory world descriptions"""
        
        print("üåç IMMERSIVE WORLD DESCRIPTIONS")
        print("=" * 60)
        print("Rich sensory details bring the world to life\n")
        
        print("‚ùå GENERIC DESCRIPTION (Before):")
        print("You are in a village. There are houses and people around.")
        print("The weather is nice today.")
        print()
        
        print("‚úÖ IMMERSIVE DESCRIPTION (After):")
        village_description = storytelling_engine.generate_immersive_scene_description(
            "Village of Millbrook", "day", "clear", "moderate", []
        )
        print(village_description)
        print()
        
        print("üåô SAME LOCATION - DIFFERENT TIME:")
        night_description = storytelling_engine.generate_immersive_scene_description(
            "Village of Millbrook", "night", "misty", "quiet", []
        )
        print(night_description)
        print()
        
        print("üß† IMMERSION TECHNIQUES:")
        print("‚Ä¢ Multiple senses engaged (sight, sound, smell)")
        print("‚Ä¢ Time and weather create atmosphere")
        print("‚Ä¢ Specific details instead of generic terms")
        print("‚Ä¢ Emotional tone matches setting")
        print("\n" + "‚ïê" * 80 + "\n")
    
    def demonstrate_world_reactions(self):
        """Show how the world reacts authentically to player actions"""
        
        print("‚ö° DYNAMIC WORLD REACTIONS")
        print("=" * 60)
        print("The world responds believably to player choices\n")
        
        scenarios = [
            ("Stealing in Village", "steal bread from market", "Village of Millbrook", 
             ["guard_tim", "martha_innkeeper"], {"karma": -20}),
            ("Helping Villagers", "help elderly woman carry groceries", "Village of Millbrook",
             ["elder_miriam"], {"karma": 30}),
            ("Violence in Peaceful Area", "attack merchant", "Village of Millbrook",
             ["guard_tim", "martha_innkeeper"], {"karma": -80})
        ]
        
        for scenario_name, action, location, witnesses, reputation in scenarios:
            print(f"üé¨ {scenario_name.upper()}:")
            print(f"   Action: {action}")
            
            reaction = storytelling_engine.create_dynamic_world_reaction(
                action, location, witnesses, reputation
            )
            print(f"   World Reaction: {reaction}")
            print()
        
        print("üß† IMMERSION BENEFITS:")
        print("‚Ä¢ Actions have realistic consequences")
        print("‚Ä¢ NPCs react based on their personalities")
        print("‚Ä¢ World feels alive and responsive")
        print("‚Ä¢ Player choices matter authentically")
        print("\n" + "‚ïê" * 80 + "\n")
    
    def demonstrate_character_consistency(self):
        """Show how characters maintain consistent personalities"""
        
        print("üéØ CHARACTER CONSISTENCY")
        print("=" * 60)
        print("NPCs remain true to their personalities across interactions\n")
        
        print("üìä MARCUS THE GRUFF MERCHANT - CONSISTENCY CHECK:")
        print("-" * 55)
        
        interactions = [
            ("First Meeting", "first_meeting"),
            ("Business Inquiry", "business_inquiry"),
            ("Information Request", "information_request"),
            ("Casual Conversation", "casual_conversation")
        ]
        
        for interaction_name, context in interactions:
            dialogue = storytelling_engine.generate_authentic_dialogue(
                "marcus_trader", context, {"karma": 0}, [], "stranger"
            )
            print(f"{interaction_name}: '{dialogue}'")
        
        print()
        print("üß† CONSISTENCY ELEMENTS:")
        print("‚Ä¢ Same gruff, business-focused personality")
        print("‚Ä¢ Consistent speech patterns and vocabulary")
        print("‚Ä¢ Reactions match established character traits")
        print("‚Ä¢ No personality contradictions or generic responses")
        print("\n" + "‚ïê" * 80 + "\n")

def run_immersion_demo():
    """Run the complete immersion demonstration"""
    
    print("üéÆ AI-RPG-ALPHA: IMMERSION DEMONSTRATION")
    print("=" * 80)
    print("Transforming generic NPCs into authentic, believable characters")
    print("that create maximum immersion in our text-based world.")
    print("=" * 80 + "\n")
    
    demo = ImmersionDemo()
    
    # Run all demonstrations
    demo.demonstrate_dialogue_authenticity()
    demo.demonstrate_mood_based_reactions()
    demo.demonstrate_social_class_speech()
    demo.demonstrate_immersive_descriptions()
    demo.demonstrate_world_reactions()
    demo.demonstrate_character_consistency()
    
    print("üéØ IMMERSION ACHIEVEMENT SUMMARY:")
    print("=" * 60)
    print("‚úÖ No more 'video game speak' - authentic dialogue")
    print("‚úÖ Characters react based on personality & mood")
    print("‚úÖ Rich sensory descriptions every turn")
    print("‚úÖ Social class affects speech patterns realistically")
    print("‚úÖ Dynamic world reactions to player actions")
    print("‚úÖ Consistent character personalities")
    print("‚úÖ Living, breathing world that feels real")
    print()
    print("üöÄ IMMERSION LEVEL: MAXIMUM!")
    print("Players will feel truly transported to our fantasy world.")

if __name__ == "__main__":
    run_immersion_demo() 