name: AI-RPG-Alpha CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Set up environment variables
      run: |
        echo "OPENAI_API_KEY=test-key-for-ci" >> $GITHUB_ENV

    - name: Run linting with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests with pytest
      run: |
        cd backend
        python -m pytest test_seed_loader.py -v --tb=short
        python -m pytest test_api_endpoints.py -v --tb=short

    - name: Test database seeding
      run: |
        cd backend
        python -m data.seed_db --stats
        python -m data.seed_db --force
        python -m data.seed_db --stats

    - name: Test API server startup
      run: |
        cd backend
        # Start the server in background
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test root endpoint
        curl -f http://localhost:8000/ || exit 1
        
        # Stop the server
        kill $SERVER_PID

  lint-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm init -y
        npm install --save-dev eslint
        
    - name: Lint JavaScript
      run: |
        cd frontend
        # Basic syntax check for JavaScript
        node -c script.js
        
    - name: Validate HTML
      run: |
        cd frontend
        # Basic HTML validation (check if file is well-formed)
        python3 -c "
        import html.parser
        class HTMLValidator(html.parser.HTMLParser):
            def error(self, message):
                raise ValueError(f'HTML Error: {message}')
        
        with open('index.html', 'r') as f:
            content = f.read()
            
        validator = HTMLValidator()
        validator.feed(content)
        print('HTML validation passed')
        "

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
        
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit security scan
      run: |
        bandit -r backend/ -f json -o bandit-report.json || true
        bandit -r backend/ || true
        
    - name: Check for known vulnerabilities
      run: |
        pip install -r backend/requirements.txt
        safety check || true

  build-and-package:
    runs-on: ubuntu-latest
    needs: [test, lint-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        
    - name: Create distribution package
      run: |
        # Create a simple distribution structure
        mkdir -p dist/ai-rpg-alpha
        cp -r backend/ dist/ai-rpg-alpha/
        cp -r frontend/ dist/ai-rpg-alpha/
        cp README.md dist/ai-rpg-alpha/ 2>/dev/null || echo "README.md not found, skipping"
        
        # Create a simple startup script
        cat > dist/ai-rpg-alpha/start.sh << 'EOF'
        #!/bin/bash
        echo "Starting AI-RPG-Alpha..."
        cd backend
        python -m data.seed_db --force
        python -m uvicorn main:app --host 0.0.0.0 --port 8000
        EOF
        chmod +x dist/ai-rpg-alpha/start.sh
        
        # Create archive
        cd dist
        tar -czf ai-rpg-alpha-v0.1.0.tar.gz ai-rpg-alpha/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ai-rpg-alpha-build
        path: dist/ai-rpg-alpha-v0.1.0.tar.gz
        retention-days: 30

  integration-test:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        
    - name: Run integration tests
      run: |
        cd backend
        
        # Set up test environment
        export OPENAI_API_KEY="test-key-for-integration"
        
        # Initialize database
        python -m data.seed_db --force
        
        # Start server in background
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Run integration tests
        python3 -c "
        import requests
        import json
        import time
        
        base_url = 'http://localhost:8000'
        
        # Test health endpoint
        response = requests.get(f'{base_url}/health')
        assert response.status_code == 200
        health_data = response.json()
        assert health_data['status'] == 'healthy'
        print('✓ Health check passed')
        
        # Test turn endpoint
        turn_data = {
            'player_id': 'integration_test_player',
            'choice': 'Begin my adventure in this AI-driven world'
        }
        
        response = requests.post(f'{base_url}/turn', json=turn_data)
        assert response.status_code == 200
        turn_response = response.json()
        
        assert 'narrative' in turn_response
        assert 'choices' in turn_response
        assert 'metadata' in turn_response
        assert len(turn_response['choices']) == 4
        print('✓ Turn endpoint integration test passed')
        
        # Test multiple turns
        second_turn_data = {
            'player_id': 'integration_test_player',
            'choice': turn_response['choices'][0]
        }
        
        response = requests.post(f'{base_url}/turn', json=second_turn_data)
        assert response.status_code == 200
        print('✓ Multiple turns test passed')
        
        print('All integration tests passed!')
        "
        
        # Stop the server
        kill $SERVER_PID

  performance-test:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install requests
        
    - name: Run basic performance tests
      run: |
        cd backend
        
        export OPENAI_API_KEY="test-key-for-performance"
        
        # Initialize database
        python -m data.seed_db --force
        
        # Start server
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        sleep 10
        
        # Run performance test
        python3 -c "
        import requests
        import time
        import concurrent.futures
        
        def make_request(player_id):
            try:
                response = requests.post(
                    'http://localhost:8000/turn',
                    json={'player_id': f'perf_test_{player_id}', 'choice': 'test action'},
                    timeout=30
                )
                return response.status_code == 200
            except:
                return False
        
        # Test concurrent requests
        start_time = time.time()
        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            futures = [executor.submit(make_request, i) for i in range(10)]
            results = [future.result() for future in concurrent.futures.as_completed(futures)]
        
        end_time = time.time()
        duration = end_time - start_time
        success_rate = sum(results) / len(results)
        
        print(f'Performance test completed in {duration:.2f} seconds')
        print(f'Success rate: {success_rate:.2%}')
        
        assert success_rate >= 0.8, f'Success rate too low: {success_rate:.2%}'
        assert duration < 60, f'Test took too long: {duration:.2f} seconds'
        
        print('Performance test passed!')
        "
        
        kill $SERVER_PID

